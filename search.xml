<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>suan</title>
      <link href="/2023/10/29/suan/"/>
      <url>/2023/10/29/suan/</url>
      
        <content type="html"><![CDATA[<h3 id="231029"><a href="#231029" class="headerlink" title="231029"></a>231029</h3><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br>请注意 ，必须在不复制数组的情况下原地对数组进行操作。<br>示例 1:<br>输入: nums = [0,1,0,3,12]<br>输出: [1,3,12,0,0]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void moveZeroes(int[] nums) &#123;</span><br><span class="line">        int n = nums.length, left = 0, right = 0;</span><br><span class="line">        while (right &lt; n) &#123;</span><br><span class="line">            if (nums[right] != 0) &#123;</span><br><span class="line">                swap(nums, left, right);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void swap(int[] nums, int left, int right) &#123;</span><br><span class="line">        int temp = nums[left];</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        nums[right] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="231030"><a href="#231030" class="headerlink" title="231030"></a>231030</h3><p>给你一个整数数组 citations ，其中 citations[i] 表示研究者的第 i 篇论文被引用的次数，citations 已经按照 升序排列 。计算并返回该研究者的 h 指数。<br>h 指数的定义：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （n 篇论文中）总共有 h 篇论文分别被引用了至少 h 次。<br>请你设计并实现对数时间复杂度的算法解决此问题。<br>示例 1：<br>输入：citations = [0,1,3,5,6]<br>输出：3<br>解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 0, 1, 3, 5, 6 次。<br>     由于研究者有3篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3 。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int hIndex(int[] citations) &#123;</span><br><span class="line">        int n = citations.length;</span><br><span class="line">        int left = 0, right = n - 1;</span><br><span class="line">        while (left &lt;= right) &#123;</span><br><span class="line">            int mid = left + (right - left) / 2;</span><br><span class="line">            if (citations[mid] &gt;= n - mid) &#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return n - left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//二分查找 数值与角标的关系</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2023/10/28/markdowm/"/>
      <url>/2023/10/28/markdowm/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级的标记语言，用于简单而直观地格式化文本。以下是一些常用的 Markdown 语法：</p><ol><li><p>标题：使用 “#” 符号表示标题，一级标题使用一个 “#”，二级标题使用两个 “##”，以此类推。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure></li><li><p>强调：使用 “*” 或 “_” 包围文本可以使其加粗或斜体。使用一个符号表示斜体，使用两个符号表示加粗。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**加粗**</span><br></pre></td></tr></table></figure></li><li><p>列表：使用 “-“ 或 “*” 表示无序列表，使用数字和英文句点表示有序列表。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表项1</span><br><span class="line">- 无序列表项2</span><br><span class="line"></span><br><span class="line">1. 有序列表项1</span><br><span class="line">2. 有序列表项2</span><br></pre></td></tr></table></figure></li><li><p>链接和图片：使用 “<a href="链接地址">链接文本</a>“ 来创建链接，使用 “<img src="图片地址" alt="图片描述">“ 来插入图片。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度](https://www.baidu.com)</span><br><span class="line">![图片描述](https://example.com/image.jpg)</span><br></pre></td></tr></table></figure></li><li><p>引用：使用 “&gt;” 符号表示引用。可以嵌套多个引用。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用文本</span><br><span class="line">&gt;&gt; 嵌套引用文本</span><br></pre></td></tr></table></figure></li><li><p>代码块：使用三个反引号包围代码块，并指定代码块的语言。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>这只是 Markdown 的一些常用语法，更多的语法和用法可以参考 Markdown 的官方文档或在线教程。</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>231018andron</title>
      <link href="/2023/10/18/231018andron/"/>
      <url>/2023/10/18/231018andron/</url>
      
        <content type="html"><![CDATA[<p>在 Android 应用开发中，为 Button 添加点击事件。以下是其中的几种方法，以及附带的代码示例：</p><p>方法一：使用匿名内部类实现 OnClickListener 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">myButton</span> <span class="operator">=</span> findViewById(R.id.myButton);</span><br><span class="line">myButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里编写点击事件的逻辑代码</span></span><br><span class="line">        <span class="comment">// 例如，显示一个 Toast 消息</span></span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Button clicked!&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方法二：使用 Lambda 表达式实现 OnClickListener 接口（仅适用于 Java 8 或更高版本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">myButton</span> <span class="operator">=</span> findViewById(R.id.myButton);</span><br><span class="line">myButton.setOnClickListener(v -&gt; &#123;</span><br><span class="line">    <span class="comment">// 在这里编写点击事件的逻辑代码</span></span><br><span class="line">    <span class="comment">// 例如，显示一个 Toast 消息</span></span><br><span class="line">    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Button clicked!&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方法三：在布局文件中使用 android:onClick 属性指定点击事件的方法名</p><p>在布局文件中的 Button 元素中添加 <code>android:onClick</code> 属性，并指定一个方法名，该方法将在点击事件发生时被调用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/myButton&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;Click me!&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">&quot;onButtonClick&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在相应的 Activity 中添加一个具有相同名称的公共方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onButtonClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="comment">// 在这里编写点击事件的逻辑代码</span></span><br><span class="line">    <span class="comment">// 例如，显示一个 Toast 消息</span></span><br><span class="line">    Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Button clicked!&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java1</title>
      <link href="/2023/03/23/Java/"/>
      <url>/2023/03/23/Java/</url>
      
        <content type="html"><![CDATA[<h3 id="变量的使用注意事项"><a href="#变量的使用注意事项" class="headerlink" title="变量的使用注意事项"></a>变量的使用注意事项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.变量表示内存中的一个存储区域[不同的变量，类型不同，占用的空间大小不同，比如：int4个字节，double就是5个字节]</span><br><span class="line">2.该区域有自己的名称[变量名]和类型[数据类型]</span><br><span class="line">3.变量必须先声明，后使用，即有顺序</span><br><span class="line">4.该区域的数据可以在同一类型范围内不断变化</span><br><span class="line">5.变量在同一个作用域内不能重名</span><br><span class="line">6.变量=变量名+值+数据类型，这一点请大家注意。变量三要素</span><br></pre></td></tr></table></figure><p>标识符命名规范<br>包名:多单词组成时所有字母都小写: aaa.bbb.ccc //比如 com.hsp.crm类名接口名:多单词组成时，所有单词的首字母大写: XxxYyyZzz 大驼峰1比如:TankShotGame<br>变量名、方法名:多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写: xxxYyyZzz [小驼峰，简称 驼峰法]比: tankShotGame<br>常量名:所有字母都大写。多单词时每个单词用下划线连接: XXX YYY ZZZ比如:定义一个所得税率 TAX RATE后面我们学习到 类，包，接口，等时，我们的命名规范要这样遵守</p><p> 包<br> 类<br> 方法</p><ol><li><p>声明和创建类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建对象并访问属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">// 创建一个 Person 对象</span></span><br><span class="line">person.name = <span class="string">&quot;John&quot;</span>; <span class="comment">// 访问对象的属性并赋值</span></span><br><span class="line">person.age = <span class="number">25</span>;</span><br></pre></td></tr></table></figure></li><li><p>定义和调用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="comment">// 定义一个方法来执行加法操作</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>(); <span class="comment">// 创建一个 Calculator 对象</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.add(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 调用对象的方法并获取结果</span></span><br></pre></td></tr></table></figure></li><li><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123; <span class="comment">// 构造方法用于初始化对象的属性</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>); <span class="comment">// 创建对象时使用构造方法</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;hello world!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针</title>
      <link href="/2023/02/11/%E6%8C%87%E9%92%88/"/>
      <url>/2023/02/11/%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 123456 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针学习</title>
      <link href="/2023/01/17/%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/17/%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、指针的理解"><a href="#一、指针的理解" class="headerlink" title="一、指针的理解"></a><strong><em>一、指针的理解</em></strong></h1><p>指针就相当于一个绝对地址，可以通过地址来直接访问或修改内存里存放的“值”，不是通过变量名，而是像坐标一样找到，房间名可能会变但坐标不会。 像东经北纬。</p><h1 id="二、指针的表示"><a href="#二、指针的表示" class="headerlink" title="二、指针的表示"></a><strong><em>二、指针的表示</em></strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> int a = 10;//定义一个变量，内存有一块空间来存放a值</span><br><span class="line"> int *p = &amp;a;//int* :是指针变量 &amp;:为取地址符 </span><br><span class="line">             //将a的地址取出存放到指针变量 p里面</span><br><span class="line">printf(&quot;%d&quot;,*p);//也可以通过指针来打印</span><br><span class="line">*p=11;          //*：解引用 可修改值 </span><br><span class="line">printf（&quot;%d&quot;,a);</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1、指针的大小"><a href="#1、指针的大小" class="headerlink" title="1、指针的大小"></a><strong><em>1、指针的大小</em></strong></h2><p>在32位电脑中有32根地址线，每根地址线都能表示高电压(1)和低电压(0)，那么就有2^32个地址。</p><p>由此在32位电脑中存放一个指针要4Byte来进行存储，在64位电脑中要8Byte来存储<br><img src="https://img-blog.csdnimg.cn/5ce804b72c0f4061807f64f870eaebf6.png" alt=""><br><img src="https://img-blog.csdnimg.cn/ef9c4002817441db8b43c6297a7655bb.png" alt="Alt"></p><h1 id="三、指针的使用"><a href="#三、指针的使用" class="headerlink" title="三、指针的使用"></a><strong><em>三、指针的使用</em></strong></h1><h2 id="1、变量访问"><a href="#1、变量访问" class="headerlink" title="1、变量访问"></a>1、变量访问</h2><p>指针变量的大小都是相同的，不同位数的电脑除外，<br>指针的类型决定了，能够访问空间的大小<br><code>int* p:*p能够访问4个字节</code><br><code>char* p:*p能够访问1个字节</code><br><code>double *p:*p能够访问8个字节</code></p><h2 id="2、数组的指针"><a href="#2、数组的指针" class="headerlink" title="2、数组的指针"></a><strong><em>2、数组的指针</em></strong></h2><p><img src="https://img-blog.csdnimg.cn/d2bd8df9670f4df09379ecdf538f6d87.png" alt="Alt"><img src="https://img-blog.csdnimg.cn/e8e94d64878a4312bbbd22c7cc09f444.png" alt="Alt"></p><ul><li>数组在内存中存放都是连续的一块区域，不同类型的指针变量，每个内存相距也不同。</li><li>指针本身的大小在同一平台下都是四个字节的大小，但不同类型的指针，往后跳的范围不同  int后跳4字节 char跳1字节 double跳8个字节。<br><img src="https://img-blog.csdnimg.cn/335be432d9364e98bfff6e4a3ab12b40.png" alt="Alt"></li></ul><p>绝大部分数组名就是首元素的地址，将arr和arr[0]的地址都打印出来就会发现，它们的地址都是一个。arr 和sizeof(arr)这里的数组名为整个数组。 </p><h2 id="3、通过指针来实现计算字符串长度"><a href="#3、通过指针来实现计算字符串长度" class="headerlink" title="3、通过指针来实现计算字符串长度"></a><strong><em>3、通过指针来实现计算字符串长度</em></strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int strlen(char* str)</span><br><span class="line">&#123;</span><br><span class="line">char* x = str;</span><br><span class="line">char* y = str;</span><br><span class="line">while (*y != &#x27;\0&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">return y - x;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char arr[] = &quot;wo shi xiyangyang. !!!&quot;;</span><br><span class="line">printf(&quot;%d&quot;, strlen(arr));</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、多级指针"><a href="#4、多级指针" class="headerlink" title="4、多级指针"></a><strong><em>4、多级指针</em></strong></h1><p><img src="https://img-blog.csdnimg.cn/2e87012096574405be00138fbb0ac46f.png" alt="Alt"></p><h1 id="5、指针数组"><a href="#5、指针数组" class="headerlink" title="5、指针数组"></a><strong><em>5、指针数组</em></strong></h1> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a = 1;</span><br><span class="line">int b = 2;</span><br><span class="line">int c = 3;</span><br><span class="line">int* arr[] = &#123; &amp;a,&amp;b,&amp;c &#125;;</span><br><span class="line">printf(&quot;%d &quot;, *arr[0]);</span><br><span class="line">printf(&quot;%d &quot;, *arr[1]);</span><br><span class="line">printf(&quot;%d &quot;, *arr[2]);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://cjeat.top/" title="我的仓库">仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 语言 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
